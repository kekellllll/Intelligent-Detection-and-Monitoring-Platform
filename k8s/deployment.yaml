apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-platform-api
  namespace: monitoring-platform
  labels:
    app: monitoring-platform-api
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: monitoring-platform-api
  template:
    metadata:
      labels:
        app: monitoring-platform-api
        component: api
    spec:
      containers:
      - name: api
        image: monitoring-platform:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-platform-api-service
  namespace: monitoring-platform
  labels:
    app: monitoring-platform-api
spec:
  selector:
    app: monitoring-platform-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-platform-ingress
  namespace: monitoring-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.example.com
    secretName: monitoring-platform-tls
  rules:
  - host: monitoring.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: monitoring-platform-api-service
            port:
              number: 80